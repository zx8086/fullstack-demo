import { BROWSER } from 'esm-env';
import * as stylesBrowser from './stylesBrowser.js';
import * as stylesNode from './stylesNode.js';
const getStyleBrowser = (styleKey) => {
    // @ts-ignore
    return stylesBrowser[styleKey] ?? undefined;
};
const getStyleNode = (styleKey) => {
    // @ts-ignore
    return stylesNode[styleKey] ?? undefined;
};
export const color = (style, str) => {
    return BROWSER ? colorBrowser(style, str) : colorNode(style, str);
};
const colorNode = (style, str) => {
    return `${getStyleNode(style).start}${str}${getStyleNode(style).end}`;
};
const START1 = `$$KitQL_`;
const START2 = `_KitQL$$`;
const END = `$$KitQLEND$$`;
const colorBrowser = (style, str) => {
    return `${START1}${style}${START2}${str}${END}`;
};
function extractKitQLTags(str) {
    const regex = /\$\$KitQL_(.*?)_KitQL\$\$/g;
    let match;
    const results = [];
    while ((match = regex.exec(str)) !== null) {
        results.push(match[1]);
    }
    return results;
}
const getAllIndexOf = (str, subStr) => {
    let lastIndex = 0;
    const indexes = [];
    while (lastIndex !== -1) {
        lastIndex = str.indexOf(subStr, lastIndex);
        if (lastIndex !== -1) {
            indexes.push(lastIndex);
            lastIndex += subStr.length;
        }
    }
    return indexes;
};
export const colorProcess = (str) => {
    if (!BROWSER) {
        return [str];
    }
    const originalStr = str;
    const posToReplace = [];
    // we need to make it unique
    const tagsUsed = [...new Set(extractKitQLTags(str))];
    for (const key of tagsUsed) {
        // check indexes
        const indexesStarts = getAllIndexOf(originalStr, `${START1}${key}${START2}`);
        for (const index of indexesStarts) {
            posToReplace.push({ index, browser: getStyleBrowser(key) });
        }
        // replace with %c in another str to make sure we don't change the order of indexes
        str = str.replaceAll(`${START1}${key}${START2}`, '%c');
    }
    const indexesEnd = getAllIndexOf(originalStr, END);
    for (const index of indexesEnd) {
        posToReplace.push({ index, browser: '' });
    }
    str = str.replaceAll(END, '%c');
    const colors = [];
    for (const c of posToReplace.sort((a, b) => a.index - b.index)) {
        colors.push(c.browser);
    }
    return [str, ...colors];
};
//
export const reset = (str) => {
    return color('reset', str);
};
export const bold = (str) => {
    return color('bold', str);
};
export const dim = (str) => {
    return color('dim', str);
};
export const italic = (str) => {
    return color('italic', str);
};
export const underline = (str) => {
    return color('underline', str);
};
export const inverse = (str) => {
    return color('inverse', str);
};
export const hidden = (str) => {
    return color('hidden', str);
};
export const strikethrough = (str) => {
    return color('strikethrough', str);
};
export const black = (str) => {
    return color('black', str);
};
export const red = (str) => {
    return color('red', str);
};
export const green = (str) => {
    return color('green', str);
};
export const yellow = (str) => {
    return color('yellow', str);
};
export const blue = (str) => {
    return color('blue', str);
};
export const magenta = (str) => {
    return color('magenta', str);
};
export const cyan = (str) => {
    return color('cyan', str);
};
export const white = (str) => {
    return color('white', str);
};
export const gray = (str) => {
    return color('gray', str);
};
export const bgBlack = (str) => {
    return color('bgBlack', str);
};
export const bgRed = (str) => {
    return color('bgRed', str);
};
export const bgGreen = (str) => {
    return color('bgGreen', str);
};
export const bgYellow = (str) => {
    return color('bgYellow', str);
};
export const bgBlue = (str) => {
    return color('bgBlue', str);
};
export const bgMagenta = (str) => {
    return color('bgMagenta', str);
};
export const bgCyan = (str) => {
    return color('bgCyan', str);
};
export const bgWhite = (str) => {
    return color('bgWhite', str);
};
export const blackBright = (str) => {
    return color('blackBright', str);
};
export const redBright = (str) => {
    return color('redBright', str);
};
export const greenBright = (str) => {
    return color('greenBright', str);
};
export const yellowBright = (str) => {
    return color('yellowBright', str);
};
export const blueBright = (str) => {
    return color('blueBright', str);
};
export const magentaBright = (str) => {
    return color('magentaBright', str);
};
export const cyanBright = (str) => {
    return color('cyanBright', str);
};
export const whiteBright = (str) => {
    return color('whiteBright', str);
};
export const bgBlackBright = (str) => {
    return color('bgBlackBright', str);
};
export const bgRedBright = (str) => {
    return color('bgRedBright', str);
};
export const bgGreenBright = (str) => {
    return color('bgGreenBright', str);
};
export const bgYellowBright = (str) => {
    return color('bgYellowBright', str);
};
export const bgBlueBright = (str) => {
    return color('bgBlueBright', str);
};
export const bgMagentaBright = (str) => {
    return color('bgMagentaBright', str);
};
export const bgCyanBright = (str) => {
    return color('bgCyanBright', str);
};
export const bgWhiteBright = (str) => {
    return color('bgWhiteBright', str);
};
