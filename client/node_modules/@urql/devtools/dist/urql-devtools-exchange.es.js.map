{"version":3,"file":"urql-devtools-exchange.es.js","sources":["../src/utils/createDebugMessage.ts","../src/utils/getDisplayName.ts","../src/utils/messaging.ts","../src/exchange.ts","../src/utils/hash.ts"],"sourcesContent":["import { DebugEventArg } from '@urql/core';\n\nexport const createDebugMessage = <T extends string>(debug: DebugEventArg<T>) =>\n  ({\n    type: 'debug-event',\n    source: 'exchange',\n    data: {\n      ...debug,\n      source: 'devtoolsExchange',\n      timestamp: Date.now(),\n    },\n  } as const);\n","export const getDisplayName = () => {\n  const defaultLimit = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n\n  const trace = new Error().stack || '';\n\n  // Default stack trace limit\n  Error.stackTraceLimit = defaultLimit;\n\n  // Get name of function that called 'useQuery'\n  const findings = /(useQuery|useMutation|useSubscription).*\\n\\s*at (\\w+)/.exec(\n    trace\n  );\n\n  if (findings === null) {\n    return 'Unknown';\n  }\n\n  return findings[2];\n};\n","import {\n  ExchangeMessage,\n  DevtoolsMessage,\n  ExchangeConnectionInitMessage,\n} from '../types';\n\nexport interface Messenger {\n  addMessageListener: (\n    cb: (m: ExchangeMessage | DevtoolsMessage) => void\n  ) => void;\n  sendMessage: (m: ExchangeMessage) => void;\n}\n\nconst connectionInitMessage: ExchangeConnectionInitMessage = {\n  source: 'exchange',\n  type: 'connection-init',\n  version: __pkg_version__,\n};\n\n/** Create curried args for native environment. */\nexport const createNativeMessenger = (): Messenger => {\n  let listeners: Function[] = [];\n  let ws: WebSocket;\n  let timeout: NodeJS.Timeout | undefined;\n\n  const createConnection = () => {\n    timeout = undefined;\n    ws = new WebSocket('ws://localhost:7700');\n\n    ws.onopen = () => {\n      ws.send(JSON.stringify(connectionInitMessage));\n    };\n    ws.onclose = () => {\n      timeout = timeout || setTimeout(createConnection, 500);\n    };\n    ws.onerror = () => {\n      timeout = timeout || setTimeout(createConnection, 500);\n    };\n    ws.onmessage = (message) => {\n      try {\n        if (!message.data) {\n          return;\n        }\n\n        listeners.forEach((l) =>\n          l(JSON.parse(message.data) as ExchangeMessage | DevtoolsMessage)\n        );\n      } catch (err) {\n        console.warn(err);\n      }\n    };\n  };\n  createConnection();\n\n  return {\n    addMessageListener: (cb) => {\n      listeners = [...listeners, cb];\n    },\n    sendMessage: (message) => {\n      ws.readyState === ws.OPEN && ws.send(JSON.stringify(message));\n    },\n  };\n};\n\n/** Create curried args for browser environment. */\nexport const createBrowserMessenger = (): Messenger => {\n  let listeners: Function[] = [];\n\n  window.addEventListener('message', ({ data, isTrusted }) => {\n    if (!isTrusted || !data?.source) {\n      return;\n    }\n\n    listeners.forEach((cb) => cb(data));\n  });\n\n  const addMessageListener: Messenger['addMessageListener'] = (cb) =>\n    (listeners = [...listeners, cb]);\n  const sendMessage: Messenger['sendMessage'] = (m) =>\n    window.postMessage(JSON.parse(JSON.stringify(m)), window.location.origin);\n\n  sendMessage(connectionInitMessage);\n\n  return {\n    addMessageListener,\n    sendMessage,\n  };\n};\n","import { Exchange, Client, Operation, OperationResult } from '@urql/core';\nimport { parse } from 'graphql';\nimport { pipe, tap, take, toPromise } from 'wonka';\nimport { DevtoolsExecuteQueryMessage } from './types';\nimport {\n  getDisplayName,\n  hash,\n  createDebugMessage,\n  createNativeMessenger,\n  createBrowserMessenger,\n  Messenger,\n} from './utils';\n\ninterface HandlerArgs {\n  sendMessage: Messenger['sendMessage'];\n}\n\nconst curriedDevtoolsExchange: (a: Messenger) => Exchange = ({\n  sendMessage,\n  addMessageListener,\n}) => ({ client, forward }) => {\n  // Listen for messages from devtools\n  addMessageListener((message) => {\n    if (message.source !== 'devtools' || !(message.type in messageHandlers)) {\n      return;\n    }\n\n    messageHandlers[message.type]({ client, sendMessage })(message as any);\n  });\n\n  // Forward debug events to content script\n  client.subscribeToDebugTarget &&\n    client.subscribeToDebugTarget((event) =>\n      sendMessage({\n        type: 'debug-event',\n        source: 'exchange',\n        data: event,\n      })\n    );\n\n  return (ops$) =>\n    pipe(\n      ops$,\n      tap(handleOperation({ client, sendMessage })),\n      forward,\n      tap(handleResult({ client, sendMessage }))\n    );\n};\n\ninterface HandlerArgs {\n  client: Client;\n  sendMessage: Messenger['sendMessage'];\n}\n\n/** Handle outgoing operations */\nconst handleOperation = ({ sendMessage }: HandlerArgs) => (\n  operation: Operation\n) => {\n  if (operation.kind === 'teardown') {\n    const msg = createDebugMessage({\n      type: 'teardown',\n      message: 'The operation has been torn down',\n      operation,\n      data: undefined,\n    });\n\n    return sendMessage(msg);\n  }\n\n  const msg = createDebugMessage({\n    type: 'execution',\n    message: 'The client has received an execute command.',\n    operation,\n    data: {\n      sourceComponent: getDisplayName(),\n    },\n  });\n  return sendMessage(msg);\n};\n\n/** Handle new value or error */\nconst handleResult = ({ sendMessage }: HandlerArgs) => ({\n  operation,\n  data,\n  error,\n}: OperationResult) => {\n  if (error) {\n    const msg = createDebugMessage({\n      type: 'error',\n      message: 'The operation has returned a new error.',\n      operation,\n      data: {\n        value: error,\n      },\n    });\n    return sendMessage(msg);\n  }\n\n  const msg = createDebugMessage({\n    type: 'update',\n    message: 'The operation has returned a new response.',\n    operation,\n    data: {\n      value: data,\n    },\n  });\n  sendMessage(msg);\n};\n\n/** Handle execute request message. */\nconst handleExecuteQueryMessage = ({ client }: HandlerArgs) => (\n  message: DevtoolsExecuteQueryMessage\n) => {\n  const isMutation = /(^|\\W)+mutation\\W/.test(message.query);\n  const requestType = isMutation ? 'mutation' : 'query';\n  const op = client.createRequestOperation(\n    requestType,\n    {\n      key: hash(JSON.stringify(message.query)),\n      query: parse(message.query),\n    },\n    {\n      meta: {\n        source: 'Devtools',\n      },\n    }\n  );\n\n  pipe(client.executeRequestOperation(op), take(1), toPromise);\n};\n\n/** Handle connection initiated by devtools. */\nconst handleConnectionInitMessage = ({ sendMessage }: HandlerArgs) => () =>\n  sendMessage({\n    type: 'connection-acknowledge',\n    source: 'exchange',\n    version: __pkg_version__,\n  });\n\n/** Map of handlers for incoming messages. */\nconst messageHandlers = {\n  'execute-query': handleExecuteQueryMessage,\n  'connection-init': handleConnectionInitMessage,\n} as const;\n\nexport const devtoolsExchange = ((): Exchange => {\n  const isNative =\n    typeof navigator !== 'undefined' && navigator?.product === 'ReactNative';\n  const isSSR = !isNative && typeof window === 'undefined';\n\n  // Prod or SSR\n  if (process.env.NODE_ENV === 'production' || isSSR) {\n    return ({ forward }) => (ops$) => pipe(ops$, forward);\n  }\n\n  if (isNative) {\n    return curriedDevtoolsExchange(createNativeMessenger());\n  }\n\n  return curriedDevtoolsExchange(createBrowserMessenger());\n})();\n","// When we have separate strings it's useful to run a progressive\n// version of djb2 where we pretend that we're still looping over\n// the same string\nexport const phash = (h: number, x: string): number => {\n  h = h | 0;\n  for (let i = 0, l = x.length | 0; i < l; i++) {\n    h = (h << 5) + h + x.charCodeAt(i);\n  }\n\n  return h;\n};\n\n// This is a djb2 hashing function\nexport const hash = (x: string): number => phash(5381 | 0, x) >>> 0;\n"],"names":["const","createDebugMessage","debug","type","source","data","timestamp","Date","now","getDisplayName","defaultLimit","Error","stackTraceLimit","Infinity","trace","stack","findings","exec","connectionInitMessage","version","m","window","postMessage","JSON","parse","stringify","location","origin","curriedDevtoolsExchange","event","sendMessage","addMessageListener","message","messageHandlers","client","subscribeToDebugTarget","ops$","pipe","tap","handleOperation","forward","handleResult","operation","kind","msg","undefined","sourceComponent","error","value","isMutation","test","query","op","createRequestOperation","key","x","h","let","i","l","length","charCodeAt","phash","meta","executeRequestOperation","take","toPromise","devtoolsExchange","isNative","navigator","product","isSSR","process","env","NODE_ENV","listeners","ws","timeout","send","setTimeout","createConnection","forEach","err","console","warn","WebSocket","onopen","onclose","onerror","onmessage","cb","readyState","OPEN","createNativeMessenger","addEventListener","createBrowserMessenger"],"mappings":"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"}