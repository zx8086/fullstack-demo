import { createRequest as e, Client as t } from "@urql/core";

export * from "@urql/core";

import { make as r, subscribe as a, scan as o, switchMap as n, never as i, concat as s, fromValue as u, map as c } from "wonka";

import { writable as v, derived as l } from "svelte/store";

import { getContext as p, setContext as f } from "svelte";

var fromStore = e => r((t => e.subscribe(t.next)));

var d = {
  operation: void 0,
  fetching: !1,
  data: void 0,
  error: void 0,
  extensions: void 0,
  hasNext: !1,
  stale: !1
};

var createPausable = e => ({
  isPaused$: e,
  pause() {
    e.set(!0);
  },
  resume() {
    e.set(!1);
  }
});

function queryStore(t) {
  var r = e(t.query, t.variables);
  var p = {
    requestPolicy: t.requestPolicy,
    ...t.context
  };
  var f = t.client.createRequestOperation("query", r, p);
  var x = {
    ...d,
    operation: f
  };
  var q = v(!!t.pause);
  var b = v(x, (() => a((e => {
    b.set(e);
  }))(o(((e, t) => ({
    ...e,
    ...t
  })), x)(n((e => {
    if (e) {
      return i;
    }
    return s([ u({
      fetching: !0,
      stale: !1
    }), c((({stale: e, data: t, error: r, extensions: a, operation: o}) => ({
      fetching: !1,
      stale: !!e,
      data: t,
      error: r,
      operation: o,
      extensions: a
    })))(t.client.executeRequestOperation(f)), u({
      fetching: !1
    }) ]);
  }))(fromStore(q)))).unsubscribe));
  return {
    ...l(b, ((e, t) => {
      t(e);
    })),
    ...createPausable(q)
  };
}

function mutationStore(t) {
  var r = e(t.query, t.variables);
  var n = t.client.createRequestOperation("mutation", r, t.context);
  var i = {
    ...d,
    operation: n,
    fetching: !0
  };
  var s = v(i);
  var u = a((e => {
    s.set(e);
  }))(o(((e, t) => ({
    ...e,
    ...t
  })), i)(c((({stale: e, data: t, error: r, extensions: a, operation: o}) => ({
    fetching: !1,
    stale: e,
    data: t,
    error: r,
    operation: o,
    extensions: a
  })))(t.client.executeRequestOperation(n))));
  return l(s, ((e, t) => {
    t(e);
    return u.unsubscribe;
  }));
}

function subscriptionStore(t, r) {
  var p = e(t.query, t.variables);
  var f = t.client.createRequestOperation("subscription", p, t.context);
  var x = {
    ...d,
    operation: f,
    fetching: !0
  };
  var q = v(!!t.pause);
  var b = v(x, (() => a((e => {
    b.set(e);
  }))(o(((e, t) => {
    var a = void 0 !== t.data ? "function" == typeof r ? r(e.data, t.data) : t.data : e.data;
    return {
      ...e,
      ...t,
      data: a
    };
  }), x)(n((e => {
    if (e) {
      return i;
    }
    return s([ u({
      fetching: !0,
      stale: !1
    }), c((({stale: e, data: t, error: r, extensions: a, operation: o}) => ({
      fetching: !0,
      stale: !!e,
      data: t,
      error: r,
      operation: o,
      extensions: a
    })))(t.client.executeRequestOperation(f)), u({
      fetching: !1
    }) ]);
  }))(fromStore(q)))).unsubscribe));
  return {
    ...l(b, ((e, t) => {
      t(e);
    })),
    ...createPausable(q)
  };
}

var x = "$$_urql";

var getContextClient = () => {
  var e = p(x);
  if ("production" !== process.env.NODE_ENV && !e) {
    throw new Error("No urql Client was found in Svelte context. Did you forget to call setContextClient?");
  }
  return e;
};

var setContextClient = e => {
  f(x, e);
};

var initContextClient = e => {
  var r = new t(e);
  setContextClient(r);
  return r;
};

export { getContextClient, initContextClient, mutationStore, queryStore, setContextClient, subscriptionStore };
//# sourceMappingURL=urql-svelte.mjs.map
