import type { Framework } from './kit';
declare const _default: (getFramwork: () => Framework) => {
    config?: ((config: import("houdini").Config, env: import("vite").ConfigEnv) => import("vite").UserConfig | Promise<import("vite").UserConfig>) | undefined;
    buildStart?: ((this: import("rollup").PluginContext, options: import("rollup").NormalizedInputOptions & {
        houdiniConfig: import("houdini").Config;
    }) => void | Promise<void>) | undefined;
    buildEnd?: ((this: import("rollup").PluginContext, error?: Error | undefined, houdiniConfig?: import("houdini").Config | undefined) => void | Promise<void>) | undefined;
    closeBundle?: ((this: import("rollup").PluginContext, config: import("houdini").Config) => void | Promise<void>) | undefined;
    configResolved?: import("rollup").ObjectHook<(this: void, config: Readonly<Omit<import("vite").UserConfig, "plugins" | "assetsInclude" | "optimizeDeps" | "worker"> & {
        configFile: string | undefined;
        configFileDependencies: string[];
        inlineConfig: import("vite").InlineConfig;
        root: string;
        base: string;
        publicDir: string;
        cacheDir: string;
        command: "build" | "serve";
        mode: string;
        isWorker: boolean;
        isProduction: boolean;
        env: Record<string, any>;
        resolve: Required<import("vite").ResolveOptions> & {
            alias: import("vite").Alias[];
        };
        plugins: readonly import("vite").Plugin[];
        server: import("vite").ResolvedServerOptions;
        build: import("vite").ResolvedBuildOptions;
        preview: import("vite").ResolvedPreviewOptions;
        ssr: import("vite").ResolvedSSROptions;
        assetsInclude: (file: string) => boolean;
        logger: import("vite").Logger;
        createResolver: (options?: Partial<import("vite").InternalResolveOptions> | undefined) => import("vite").ResolveFn;
        optimizeDeps: import("vite").DepOptimizationOptions;
        worker: import("vite").ResolveWorkerOptions;
        appType: import("vite").AppType;
        experimental: import("vite").ExperimentalOptions;
    } & import("vite").PluginHookUtils>) => void | Promise<void>, {}> | undefined;
    options?: ((this: import("rollup").MinimalPluginContext, options: import("rollup").InputOptions & {
        houdiniConfig: import("houdini").Config;
    }) => import("rollup").NullValue | import("rollup").InputOptions) | undefined;
    resolveId?: import("rollup").ObjectHook<(this: import("rollup").PluginContext, source: string, importer: string | undefined, options: {
        config: import("houdini").Config;
        custom?: import("rollup").CustomPluginOptions | undefined;
        ssr?: boolean | undefined;
        isEntry: boolean;
    }) => import("rollup").ResolveIdResult | Promise<import("rollup").ResolveIdResult>, {}> | undefined;
    load?: import("rollup").ObjectHook<(this: import("rollup").PluginContext, id: string, options: {
        config: import("houdini").Config;
        ssr?: boolean | undefined;
    }) => import("rollup").LoadResult | Promise<import("rollup").LoadResult>, {}> | undefined;
    configureServer?: import("rollup").ObjectHook<(this: void, server: import("vite").ViteDevServer & {
        houdiniConfig: import("houdini").Config;
    }) => void | (() => void) | Promise<void | (() => void)>, {}> | undefined;
} | undefined;
export default _default;
