import type { Config, PluginHooks } from 'houdini';
export declare let _config: Config;
export declare const pluginHooks: () => Promise<PluginHooks>;
declare const _default: import("houdini").PluginInit;
export default _default;
declare module 'houdini' {
    interface HoudiniPluginConfig {
        'houdini-svelte': HoudiniSvelteConfig;
    }
}
export type HoudiniSvelteConfig = {
    /**
     * A relative path from your houdini.config.js to the file that exports your client as its default value
     * @default `./src/client.ts`
     */
    client?: string;
    /**
     * Specifies whether the client side routing is blocking or not. (default: `false`)
     */
    defaultRouteBlocking?: boolean;
    /**
     * The name of the file used to define page queries.
     * @default +page.gql
     */
    pageQueryFilename?: string;
    /**
     * The name of the file used to define layout queries.
     * @default +layout.gql
     */
    layoutQueryFilename?: string;
    /**
     * A flag to treat every component as a non-route. This is useful for projects built with the static-adapter
     * @default false
     */
    static?: boolean;
    /**
     * set the framework to use. It should be automatically detected but you can override it here.
     * @default undefined
     */
    framework: 'kit' | 'svelte' | undefined;
    /**
     * Override the classes used when building stores for documents. Values should take the form package.export
     * For example, if you have a store exported from $lib/stores you should set the value to "$lib/stores.CustomStore".
     */
    customStores?: {
        query?: string;
        mutation?: string;
        subscription?: string;
        fragment?: string;
        queryCursor?: string;
        queryOffset?: string;
        fragmentCursor?: string;
        fragmentOffset?: string;
    };
};
