"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var fragment_exports = {};
__export(fragment_exports, {
  FragmentStore: () => FragmentStore
});
module.exports = __toCommonJS(fragment_exports);
var import_cache = __toESM(require("$houdini/runtime/cache"), 1);
var import_config = require("$houdini/runtime/lib/config");
var import_scalars = require("$houdini/runtime/lib/scalars");
var import_types = require("$houdini/runtime/lib/types");
var import_store = require("svelte/store");
var import_adapter = require("../adapter");
var import_base = require("./base");
class FragmentStore {
  artifact;
  name;
  kind = import_types.CompiledFragmentKind;
  context = null;
  constructor({ artifact, storeName }) {
    this.artifact = artifact;
    this.name = storeName;
  }
  get(initialValue) {
    const { variables, parent } = initialValue?.[import_types.fragmentKey]?.values?.[this.artifact.name] ?? {};
    const { loading } = initialValue?.[import_types.fragmentKey] ?? {};
    if (!loading && initialValue && import_types.fragmentKey in initialValue && (!variables || !parent) && import_adapter.isBrowser) {
      console.warn(
        `\u26A0\uFE0F Parent does not contain the information for this fragment. Something is wrong.
Please ensure that you have passed a record that has ${this.artifact.name} mixed into it.`
      );
    }
    let data = initialValue;
    if (loading || initialValue && parent && import_adapter.isBrowser) {
      data = import_cache.default.read({
        selection: this.artifact.selection,
        parent,
        variables,
        loading
      }).data;
    }
    const store = new import_base.BaseStore({
      artifact: this.artifact,
      initialValue: data
    });
    if (!loading && parent) {
      store.observer.send({ variables, setup: true, stuff: { parentID: parent } });
    }
    return {
      initialValue: data,
      variables: (0, import_scalars.marshalInputs)({
        artifact: this.artifact,
        input: variables,
        config: (0, import_config.getCurrentConfig)(),
        rootType: this.artifact.rootType
      }),
      kind: import_types.CompiledFragmentKind,
      subscribe: (0, import_store.derived)([store], ([$store]) => $store.data).subscribe
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FragmentStore
});
