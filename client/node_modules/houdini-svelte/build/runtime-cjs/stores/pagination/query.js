"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var query_exports = {};
__export(query_exports, {
  QueryStoreCursor: () => QueryStoreCursor,
  QueryStoreOffset: () => QueryStoreOffset
});
module.exports = __toCommonJS(query_exports);
var import_pageInfo = require("$houdini/runtime/lib/pageInfo");
var import_pagination = require("$houdini/runtime/lib/pagination");
var import_store = require("svelte/store");
var import_client = require("../../client");
var import_session = require("../../session");
var import_query = require("../query");
class QueryStoreCursor extends import_query.QueryStore {
  paginated = true;
  constructor(config) {
    super(config);
  }
  #_handlers = null;
  async #handlers() {
    if (this.#_handlers) {
      return this.#_handlers;
    }
    await (0, import_client.initClient)();
    const paginationObserver = (0, import_client.getClient)().observe({
      artifact: this.artifact
    });
    this.#_handlers = (0, import_pagination.cursorHandlers)({
      artifact: this.artifact,
      getState: () => (0, import_store.get)(this.observer).data,
      getVariables: () => (0, import_store.get)(this.observer).variables,
      fetch: super.fetch.bind(this),
      getSession: import_session.getSession,
      fetchUpdate: async (args, updates) => {
        return paginationObserver.send({
          ...args,
          cacheParams: {
            applyUpdates: updates,
            disableSubscriptions: true,
            ...args?.cacheParams
          }
        });
      }
    });
    return this.#_handlers;
  }
  async fetch(args) {
    const handlers = await this.#handlers();
    return await handlers.fetch.call(this, args);
  }
  async loadPreviousPage(args) {
    const handlers = await this.#handlers();
    return await handlers.loadPreviousPage(args);
  }
  async loadNextPage(args) {
    const handlers = await this.#handlers();
    return await handlers.loadNextPage(args);
  }
  subscribe(run, invalidate) {
    const combined = (0, import_store.derived)([{ subscribe: super.subscribe.bind(this) }], ([$parent]) => {
      return {
        ...$parent,
        pageInfo: (0, import_pageInfo.extractPageInfo)($parent.data, this.artifact.refetch.path)
      };
    });
    return combined.subscribe(run, invalidate);
  }
}
class QueryStoreOffset extends import_query.QueryStore {
  paginated = true;
  async loadNextPage(args) {
    const handlers = await this.#handlers();
    return await handlers.loadNextPage.call(this, args);
  }
  async fetch(args) {
    const handlers = await this.#handlers();
    return await handlers.fetch.call(this, args);
  }
  #_handlers = null;
  async #handlers() {
    if (this.#_handlers) {
      return this.#_handlers;
    }
    await (0, import_client.initClient)();
    const paginationObserver = (0, import_client.getClient)().observe({
      artifact: this.artifact
    });
    this.#_handlers = (0, import_pagination.offsetHandlers)({
      artifact: this.artifact,
      storeName: this.name,
      fetch: super.fetch,
      getState: () => (0, import_store.get)(this.observer).data,
      getVariables: () => (0, import_store.get)(this.observer).variables,
      getSession: import_session.getSession,
      fetchUpdate: async (args) => {
        await (0, import_client.initClient)();
        return paginationObserver.send({
          ...args,
          variables: {
            ...args?.variables
          },
          cacheParams: {
            applyUpdates: ["append"]
          }
        });
      }
    });
    return this.#_handlers;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  QueryStoreCursor,
  QueryStoreOffset
});
