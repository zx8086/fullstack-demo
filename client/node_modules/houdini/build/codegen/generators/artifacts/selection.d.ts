import * as graphql from 'graphql';
import type { Config, Document } from '../../../lib';
import { type MutationOperation, type SubscriptionSelection } from '../../../runtime/lib/types';
export default function (args: Omit<Parameters<typeof prepareSelection>[0], 'typeMap' | 'abstractTypes'>): SubscriptionSelection;
declare function prepareSelection({ config, filepath, rootType, selections, operations, path, document, inConnection, globalLoading, includeFragments, hasComponents, }: {
    config: Config;
    filepath: string;
    rootType: string;
    selections: readonly graphql.SelectionNode[];
    operations: {
        [path: string]: MutationOperation[];
    };
    path?: string[];
    document: Document;
    inConnection?: boolean;
    globalLoading?: boolean;
    includeFragments?: boolean;
    hasComponents: () => void;
}): SubscriptionSelection;
export {};
