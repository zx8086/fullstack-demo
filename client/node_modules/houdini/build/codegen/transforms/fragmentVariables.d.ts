import * as graphql from 'graphql';
import { type Config, type Document, type ValueMap } from '../../lib';
export default function fragmentVariables(config: Config, documents: Document[]): Promise<void>;
export declare function withArguments(config: Config, node: graphql.FragmentSpreadNode): graphql.ArgumentNode[];
export type FragmentArgument = {
    name: string;
    type: graphql.TypeNode;
    required: boolean;
    defaultValue: graphql.ValueNode | null;
};
export declare function fragmentArguments(config: Config, filepath: string, definition: graphql.FragmentDefinitionNode | graphql.FragmentSpreadNode): FragmentArgument[];
export declare function parseArgumentTypeString(input: string): graphql.TypeNode;
export declare function collectWithArguments(config: Config, filepath: string, node: graphql.FragmentSpreadNode, scope?: ValueMap | null): {
    args: ValueMap | null;
    hash: string;
};
export declare function fragmentArgumentsDefinitions(config: Config, filepath: string, definition: graphql.FragmentDefinitionNode): graphql.VariableDefinitionNode[];
