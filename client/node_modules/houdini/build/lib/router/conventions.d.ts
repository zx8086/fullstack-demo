import { type Config } from '..';
/** The location of the project's router */
export declare function router_path(config: Config): string;
/** The location of the page component */
export declare function page_entry_path(config: Config, id: string, base?: string): string;
export declare function server_adapter_path(config: Config, base?: string): string;
export declare function adapter_config_path(config: Config, base?: string): string;
export declare function vite_render_path(config: Config, base?: string): string;
export declare function app_component_path(config: Config, base?: string): string;
export declare function page_unit_path(config: Config, id: string, base?: string): string;
export declare function layout_unit_path(config: Config, id: string, base?: string): string;
export declare function componentField_unit_path(config: Config, id: string, base?: string): string;
export declare function fallback_unit_path(config: Config, which: 'page' | 'layout', id: string, base?: string): string;
/** Load the page query for the given route from disk */
export declare function read_pageQuery(base: string): Promise<(string | null)[]>;
/** Load the page view for the given route from disk */
export declare function read_pageView(base: string): Promise<string[] | null[]>;
/** Load the layout query for the given route from disk */
export declare function read_layoutQuery(base: string): Promise<(string | null)[]>;
/** Load the layout view for the given route from disk */
export declare function read_layoutView(base: string): Promise<string[] | null[]>;
export declare function router_index_path(config: Config): string;
export declare function is_layout(path: string): boolean;
/** Transforms paths to ids */
export declare function page_id(path: string): string;
export declare function page_entries_dir(config: Config, base?: string): string;
export declare function serialized_manifest_path(config: Config, base?: string): string;
