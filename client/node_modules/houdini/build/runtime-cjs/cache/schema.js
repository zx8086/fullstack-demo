"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var schema_exports = {};
__export(schema_exports, {
  SchemaManager: () => SchemaManager
});
module.exports = __toCommonJS(schema_exports);
var import_cache = require("./cache");
class SchemaManager {
  cache;
  fieldTypes = {};
  constructor(cache) {
    this.cache = cache;
  }
  setFieldType({
    parent,
    key,
    type,
    nullable = false,
    link
  }) {
    let parensIndex = key.indexOf("(");
    if (parensIndex !== -1) {
      key = key.substring(0, parensIndex);
    }
    if (parent === import_cache.rootID) {
      parent = "Query";
    } else if (parent.includes(":")) {
      parent = parent.substring(0, parent.indexOf(":"));
    }
    if (!this.fieldTypes[parent]) {
      this.fieldTypes[parent] = {};
    }
    this.fieldTypes[parent][key] = {
      type,
      nullable,
      link: !!link
    };
  }
  fieldType(type, field) {
    return this.fieldTypes[type]?.[field] || null;
  }
  get config() {
    return this.cache._internal_unstable.config;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SchemaManager
});
