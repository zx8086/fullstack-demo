"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var subscription_exports = {};
__export(subscription_exports, {
  subscription: () => subscription
});
module.exports = __toCommonJS(subscription_exports);
var import_deepEquals = require("../../lib/deepEquals");
var import_types = require("../../lib/types");
var import_utils = require("../utils");
function subscription(factory) {
  return (0, import_utils.documentPlugin)(import_types.ArtifactKind.Subscription, () => {
    let clearSubscription = null;
    let check = null;
    return {
      start(ctx, { resolve, next, initialValue }) {
        if (typeof globalThis.window === "undefined") {
          resolve(ctx, initialValue);
          return;
        }
        next(ctx);
      },
      async network(ctx, { resolve, initialValue, variablesChanged, marshalVariables }) {
        const checkValue = {
          fetchParams: ctx.fetchParams ?? {},
          session: ctx.session ?? {},
          metadata: ctx.metadata ?? {}
        };
        const changed = variablesChanged(ctx);
        const sessionChange = !(0, import_deepEquals.deepEquals)(check, checkValue);
        if (!changed && !sessionChange) {
          resolve(ctx, initialValue);
          return;
        }
        check = checkValue;
        if (sessionChange) {
          await loadClient(ctx, factory);
        }
        clearSubscription?.();
        clearSubscription = client.subscribe(
          {
            operationName: ctx.name,
            query: ctx.text,
            variables: marshalVariables(ctx)
          },
          {
            next: ({ data, errors }) => {
              resolve(ctx, {
                data: data ?? null,
                errors: [...errors ?? []],
                fetching: false,
                partial: true,
                stale: false,
                source: import_types.DataSource.Network,
                variables: ctx.variables ?? {}
              });
            },
            error(data) {
              clearSubscription?.();
              resolve(ctx, {
                partial: true,
                stale: false,
                source: import_types.DataSource.Network,
                data: null,
                errors: [data],
                fetching: false,
                variables: ctx.variables ?? {}
              });
            },
            complete() {
            }
          }
        );
      },
      cleanup() {
        clearSubscription?.();
        check = null;
      }
    };
  });
}
let pendingCreate = null;
let client;
function loadClient(ctx, factory) {
  if (pendingCreate) {
    return pendingCreate;
  }
  pendingCreate = new Promise((resolve) => {
    client = factory(ctx);
    resolve();
    pendingCreate = null;
  });
  return pendingCreate;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  subscription
});
