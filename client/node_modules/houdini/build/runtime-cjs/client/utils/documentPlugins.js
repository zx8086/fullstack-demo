"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var documentPlugins_exports = {};
__export(documentPlugins_exports, {
  documentPlugin: () => documentPlugin
});
module.exports = __toCommonJS(documentPlugins_exports);
const documentPlugin = (kind, source) => {
  return () => {
    const sourceHandlers = source();
    const enterWrapper = (handler) => {
      return !handler ? void 0 : (ctx, handlers) => {
        if (ctx.artifact.kind !== kind) {
          return handlers.next(ctx);
        }
        return handler(ctx, handlers);
      };
    };
    const exitWrapper = (handler) => {
      return !handler ? void 0 : (ctx, handlers) => {
        if (ctx.artifact.kind !== kind) {
          return handlers.resolve(ctx);
        }
        return handler(ctx, handlers);
      };
    };
    return {
      start: enterWrapper(sourceHandlers.start),
      network: enterWrapper(sourceHandlers.network),
      afterNetwork: exitWrapper(sourceHandlers.afterNetwork),
      end: exitWrapper(sourceHandlers.end),
      catch: sourceHandlers.catch ? (ctx, handlers) => sourceHandlers.catch(ctx, handlers) : void 0,
      cleanup: (...args) => sourceHandlers.cleanup?.(...args)
    };
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  documentPlugin
});
