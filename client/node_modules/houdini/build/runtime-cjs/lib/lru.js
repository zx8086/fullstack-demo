"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var lru_exports = {};
__export(lru_exports, {
  LRUCache: () => LRUCache,
  createLRUCache: () => createLRUCache
});
module.exports = __toCommonJS(lru_exports);
class LRUCache {
  _capacity;
  _map;
  constructor(capacity = 1e3) {
    this._capacity = capacity;
    this._map = /* @__PURE__ */ new Map();
  }
  set(key, value) {
    this._map.delete(key);
    this._map.set(key, value);
    if (this._map.size > this._capacity) {
      const firstKey = this._map.keys().next();
      if (!firstKey.done) {
        this._map.delete(firstKey.value);
      }
    }
  }
  get(key) {
    const value = this._map.get(key);
    if (value != null) {
      this._map.delete(key);
      this._map.set(key, value);
    }
    return value ?? null;
  }
  has(key) {
    return this._map.has(key);
  }
  delete(key) {
    this._map.delete(key);
  }
  size() {
    return this._map.size;
  }
  capacity() {
    return this._capacity - this._map.size;
  }
  clear() {
    this._map.clear();
  }
}
function createLRUCache(capacity = 1e3) {
  return new LRUCache(capacity);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LRUCache,
  createLRUCache
});
