"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var selection_exports = {};
__export(selection_exports, {
  getFieldsForType: () => getFieldsForType
});
module.exports = __toCommonJS(selection_exports);
function getFieldsForType(selection, __typename, loading) {
  if (loading) {
    if (selection.loadingTypes && selection.loadingTypes.length > 0) {
      return deepMerge(
        ...selection.loadingTypes.map((type) => selection.abstractFields?.fields[type])
      );
    }
    return selection.fields ?? {};
  }
  let targetSelection = selection.fields || {};
  if (selection.abstractFields && __typename) {
    const mappedType = selection.abstractFields.typeMap[__typename];
    if (mappedType) {
      targetSelection = selection.abstractFields.fields[mappedType];
    } else if (selection.abstractFields.fields[__typename]) {
      targetSelection = selection.abstractFields.fields[__typename];
    }
  }
  return targetSelection;
}
function deepMerge(...objects) {
  const mergedObj = {};
  for (let obj of objects) {
    if (!obj) {
      continue;
    }
    for (let prop in obj) {
      if (prop in obj) {
        const val = obj[prop];
        if (typeof val === "object" && val !== null && !Array.isArray(val)) {
          mergedObj[prop] = deepMerge(mergedObj[prop] || {}, val);
        } else {
          mergedObj[prop] = val;
        }
      }
    }
  }
  return mergedObj;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getFieldsForType
});
