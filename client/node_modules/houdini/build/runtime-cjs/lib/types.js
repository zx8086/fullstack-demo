"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var types_exports = {};
__export(types_exports, {
  ArtifactKind: () => ArtifactKind,
  CachePolicy: () => CachePolicy,
  CompiledFragmentKind: () => CompiledFragmentKind,
  CompiledMutationKind: () => CompiledMutationKind,
  CompiledQueryKind: () => CompiledQueryKind,
  CompiledSubscriptionKind: () => CompiledSubscriptionKind,
  DataSource: () => DataSource,
  PaginateMode: () => PaginateMode,
  PendingValue: () => PendingValue,
  RefetchUpdateMode: () => RefetchUpdateMode,
  fragmentKey: () => fragmentKey,
  isPending: () => isPending
});
module.exports = __toCommonJS(types_exports);
__reExport(types_exports, require("../router/types"), module.exports);
const CachePolicy = {
  CacheOrNetwork: "CacheOrNetwork",
  CacheOnly: "CacheOnly",
  NetworkOnly: "NetworkOnly",
  CacheAndNetwork: "CacheAndNetwork"
};
const PaginateMode = {
  Infinite: "Infinite",
  SinglePage: "SinglePage"
};
const ArtifactKind = {
  Query: "HoudiniQuery",
  Subscription: "HoudiniSubscription",
  Mutation: "HoudiniMutation",
  Fragment: "HoudiniFragment"
};
const CompiledFragmentKind = ArtifactKind.Fragment;
const CompiledMutationKind = ArtifactKind.Mutation;
const CompiledQueryKind = ArtifactKind.Query;
const CompiledSubscriptionKind = ArtifactKind.Subscription;
const RefetchUpdateMode = {
  append: "append",
  prepend: "prepend",
  replace: "replace"
};
const DataSource = {
  Cache: "cache",
  Network: "network",
  Ssr: "ssr"
};
const fragmentKey = " $fragments";
const PendingValue = Symbol("houdini_loading");
function isPending(value) {
  return typeof value === "symbol";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ArtifactKind,
  CachePolicy,
  CompiledFragmentKind,
  CompiledMutationKind,
  CompiledQueryKind,
  CompiledSubscriptionKind,
  DataSource,
  PaginateMode,
  PendingValue,
  RefetchUpdateMode,
  fragmentKey,
  isPending
});
