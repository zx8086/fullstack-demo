"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var record_exports = {};
__export(record_exports, {
  Record: () => Record
});
module.exports = __toCommonJS(record_exports);
var import_cache = require("../cache/cache");
var import_lib = require("../lib");
var import_config = require("../lib/config");
class Record {
  #id;
  #cache;
  type;
  idFields;
  constructor({
    cache,
    type,
    id,
    idFields
  }) {
    this.#cache = cache;
    this.#id = id;
    this.type = type;
    this.idFields = idFields;
    if (id !== import_cache.rootID) {
      for (const key of (0, import_config.keyFieldsForType)(this.#cache.config, type)) {
        if (!(key in idFields)) {
          throw new Error("Missing key in idFields: " + key);
        }
      }
    }
  }
  read({
    fragment,
    variables
  }) {
    return this.#cache._internal_unstable.read({
      selection: fragment.artifact.selection,
      parent: this.#id,
      variables: (0, import_lib.marshalInputs)({
        config: this.#cache.config,
        artifact: fragment.artifact,
        input: variables
      }) ?? void 0
    });
  }
  write(args) {
    this.#cache._internal_unstable.write({
      data: args.data,
      selection: args.fragment.artifact.selection,
      parent: this.#id,
      variables: (0, import_lib.marshalInputs)({
        config: this.#cache.config,
        artifact: args.fragment.artifact,
        input: args.variables
      }) ?? void 0,
      forceStale: args.forceStale
    });
  }
  delete() {
    this.#cache._internal_unstable.delete(this.#id);
  }
  markStale(field, {
    when
  } = {}) {
    this.#cache._internal_unstable.markRecordStale(this.#id, { field, when });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Record
});
